[alias]
	co = checkout
	ci = commit -a -v
	cv = commit -v
	br = branch
	cl = clean -f -d
	ru = remote update
	rs = remote show origin
	recent = log --abbrev-commit --pretty=oneline -10
	to = diff --staged --find-copies-harder	# to commit
	prd = !git remote update upstream > /dev/null && git diff `git merge-base HEAD upstream/master` --find-copies-harder $1
	prs = !git remote update upstream > /dev/null && git diff `git merge-base HEAD upstream/master` --find-copies-harder --stat
	prbd = !git remote update upstream > /dev/null && git diff `git merge-base ${1:-HEAD} upstream/master` --find-copies-harder
	prbs = !git remote update upstream > /dev/null && git diff `git merge-base ${1:-HEAD} upstream/master` --find-copies-harder --stat
	pa = push --all
	fh = log -p --graph --full-diff --find-copies-harder --
	sb = show-branch                       # from whyme
	gf = log --graph --oneline --decorate  # from whyme
	df = diff                              # from xieshi
	dif = diff
	fp = log -p -m --first-parent --find-copies-harder
	mf = merge --ff

	# http://stackoverflow.com/questions/15316601/in-what-cases-could-git-pull-be-harmful
	up = "!git remote update -p; git merge --ff-only @{u}"

	# http://stackoverflow.com/questions/2657935/checking-for-a-dirty-index-or-untracked-files-with-git
	untracked = ls-files --other --error-unmatch --exclude-standard

	# http://stackoverflow.com/questions/3878624/how-do-i-programmatically-determine-if-there-are-uncommited-changes
	unstaged = diff-files --exit-code --ignore-submodules --
	uncommited = diff-index --cached --exit-code HEAD --ignore-submodules --

[color]
	status = auto
	branch = auto
	ui = auto
[core]
	pager = less -FRSX
	excludesfile = ~/.gitignore
[user]
	name = Menghan Zheng
	email = menghan412@gmail.com
[log]
	date = local
[blame]
	date = local

[credential]
	helper = osxkeychain
[svn]
	pushmergeinfo = true
[help]
	autocorrect = 1
[push]
	default = simple

#!/usr/bin/env python2

import sys
import json
import argparse


class EncWriteWrapper(object):

    def __init__(self, wrapped, encoding='utf-8'):
        self.wrapped = wrapped
        self.encoding = encoding

    def write(self, s):
        if isinstance(s, unicode):
            s = s.encode(self.encoding)
        self.wrapped.write(s)


def subtree(obj, path):
    for seg in path.split('/'):
        if seg == '':
            continue
        if isinstance(obj, list) and seg.isdigit():
            obj = obj[int(seg)]
            continue
        if not isinstance(obj, dict):
            return None
        if seg not in obj:
            return None
        obj = obj[seg]
    return obj


def main():
    parser = argparse.ArgumentParser()
    parser.add_argument('-i', default='/dev/stdin', dest='input')
    parser.add_argument('-o', default='/dev/stdout', dest='output')
    parser.add_argument('pathes', nargs='*')
    args = parser.parse_args()

    fi = open(args.input, 'rb')
    fo = open(args.output, 'wb')
    s = fi.read()
    try:
        obj = json.loads(s)
    except ValueError:
        fo.write(s)
        return
    for path in args.pathes or ['']:
        subobj = subtree(obj, path)
        if subobj is None:
            continue
        fo.write('%s\n' % path)
        try:
            json.dump(subobj, EncWriteWrapper(fo), sort_keys=True,
                      indent=4, separators=(',', ': '), ensure_ascii=False)
            fo.write('\n')
        except IOError as e:
            if e.strerror == 'Broken pipe':
                return
            raise
        fo.write('\n')


if __name__ == '__main__':
    main()

# disable bash's history expandation
set +o histexpand

export LANG=en_US.UTF-8
export LC_ALL=en_US.UTF-8
export EDITOR=vim
export GOPATH=$HOME/.go
ssh-add 2> /dev/null
stty -ixon > /dev/null 2>&1

replace_path_out ()
{
	PATH=":$PATH:"
	PATH=${PATH/:$1:/:}
	export PATH=${PATH:1}
	if [ "x$PATH" != "x" ]; then
		export PATH=${PATH:0:$((${#PATH} - 1))}
	fi
}

replace_path_out /usr/local/bin
replace_path_out /usr/bin
replace_path_out /bin
replace_path_out /usr/local/sbin
replace_path_out /usr/sbin
replace_path_out /sbin
replace_path_out "$HOME/.local/bin"
replace_path_out "$HOME/Library/Python/2.7/bin"
replace_path_out "$HOME/bin"
replace_path_out "$GOPATH/bin"
replace_path_out "$GOROOT/bin"
export PATH="$HOME/bin:$GOPATH/bin:$GOROOT/bin:$HOME/.local/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:$PATH"

safe_source ()
{
	[[ -s "$1" ]] && source "$1"
}

uptag ()
{
	ctags -R . && cscope -Rbkq
}

if [ -f ~/.pythonstartup ]; then
	export PYTHONSTARTUP=~/.pythonstartup
fi
safe_source /etc/bash_completion
safe_source /usr/share/autojump/autojump.sh
if [[ `uname` =~ "Darwin" ]]; then
	safe_source /usr/local/etc/bash_completion
	safe_source `brew --prefix`/etc/autojump.sh
fi

export GIT_AUTHOR_NAME="Menghan"

parse_branch() {
	branch=$(git branch --no-color 2> /dev/null | sed -n '/*/ s/* //p')
	if [ -n "$branch" ]; then
		echo -n " (git::$branch) "
		return
	fi
}

BLACK="\[\033[0;38m\]"
RED="\[\033[0;31m\]"
RED_BOLD="\[\033[01;31m\]"
BLUE="\[\033[01;34m\]"
GREEN="\[\033[0;32m\]"

export PS1="\u@\h:\w$RED_BOLD\$(parse_branch)$BLACK\$ "

osxnotify() {
	terminal-notifier -message "\"$*\""
}

# list tmux sessions or attach one or create one
th()
{
	if [[ x"$1" == "x" ]]; then
		tmux ls
	else
		if tmux ls | egrep -q "^$1"; then
			tmux attach -t "$1"
		else
			echo -n "Create tmux session named \"$1\"? [Press enter to continue, ^C to abort]"
			read
			tmux new-session -s "$1"
		fi
	fi
}

godoc() {
	env godoc $1 | less
}

removeunuseoriginbranch ()
{
	git co master
	git remote update -p origin upstream
	git merge upstream/master --ff-only && git push origin master
	git branch --merged | grep -v master | xargs git branch -d
	for branch in `git remote show origin | grep tracked | awk '{print $1}'`
	do
		if [[ -z `git rev-list master..origin/$branch` ]]; then
			if ! git branch | grep -q $branch; then
				git push origin :$branch
			fi
		fi
	done
	git co -
	git remote update -p
}

dsyncto ()
{
	registry=$1; img=$2
	if [[ -z "$img" ]]; then
		echo "Usage: dsyncto <registry addr> <image name>"
		return
	fi
	shift; shift
	while true; do
		if [[ -z "$img" ]]; then
			break
		fi
		docker tag "$img" "$registry/$img"
		docker push "$registry/$img"
		docker rmi "$registry/$img"
		img="$1"
		shift
	done
}

initgo ()
{
	go get -u github.com/golang/lint/golint
	go get -u golang.org/x/tools/cmd/godoc
	go get -u golang.org/x/tools/cmd/vet
	go get -u github.com/tools/godep
	go get -u github.com/jstemmer/gotags
}

uppyenv ()
{
	if [[ -z $2 ]]; then
		echo Usage: uppyenv env-name requirements.txt
		return
	fi
	"$HOME/.virtualenvs/$1/bin/pip" install -r "$2"
}
